#!/usr/bin/env python
"""
Usage: shmenkins clean|build|upload|plan-deploy|do-deploy

Commands:
    clean           remove build artifacts
    build           build lambda
    upload          upload lambda to S3
    plan-deploy     plan to deploy everything
    do-deploy       actually deploy everything
"""

from __future__ import print_function

import boto3
import docopt
import os
import shutil
import subprocess
import zipfile


def main(args):
    if args["clean"]:
        cmd_clean()
    elif args["build"]:
        cmd_build()
    elif args["upload"]:
        cmd_upload()
    elif args["plan-deploy"]:
        cmd_plan_deploy()
    elif args["do-deploy"]:
        cmd_do_deploy()
    else:
        raise ValueError("Unknown command")


def cmd_clean():
    remove_directory(_bin_dir)


def zip_every_file_individually(source_dir, target_dir):
    for root, dirs, files in os.walk(source_dir):
        for file in files:
            source_file = os.path.join(root, file)
            target_file = os.path.join(target_dir, file + ".zip")
            log(source_file + " -> ", end="")
            with zipfile.ZipFile(target_file, "w", zipfile.ZIP_DEFLATED) as zipf:
                zipf.write(source_file, file)
                log(target_file)

def cmd_build():
    cmd_clean()
    ensure_directory(_bin_lambda_dir)

    zip_every_file_individually(_src_lambda_dir, _bin_lambda_dir)

def cmd_upload():
    upload_dir_to_s3(_bin_lambda_dir, _shmenkins_bucket, _bin_lambda_dir)
    
def upload_dir_to_s3(path, bucket, target_dir):
    s3 = boto3.resource("s3")
    for root, dirs, files in os.walk(path):
        for file in files:
            source_file = os.path.join(root, file)
            target_file = os.path.join(target_dir, file)
            log(source_file + " -> ", end="")
            with open(source_file) as f:
                response = s3.Object(bucket, target_file).put(Body=f)
                log(target_file + ":" + response.get("VersionId"))
                

def cmd_plan_deploy():
    switch_terraform_to_remote_config()
    update_terraform_vars()
    subprocess.check_call(["terraform", "plan", _src_infra_dir])
    

def cmd_do_deploy():
    pass


def switch_terraform_to_remote_config():
    if not os.path.isdir(".terraform"):
        subprocess.check_call(["terraform", "remote", "config",
                               "-backend=s3",
                               "-backend-config=bucket=" + _shmenkins_bucket,
                               "-backend-config=key=terraform.tfstate",
                               "-backend-config=region=" + _aws_region])


def update_terraform_vars():
    backup_file = _tfvars_file + ".bak"
    shutil.move(_tfvars_file, backup_file)
    with open(backup_file) as infile, open(_tfvars_file, "w") as outfile:
        for line in infile:
            variable_prefix = "s3_object_version_id_"
            updated_line = line
            try:
                if line.startswith(variable_prefix):
                    file_name = line[len(variable_prefix):].split("=")[0]
                    latest_version_id = get_latest_s3_object_version_id(file_name)
                    updated_line = variable_prefix + file_name + "=\"" + latest_version_id + "\""
                    log(updated_line)
            except:
                updated_line = line
            outfile.write(updated_line)
    

def get_latest_s3_object_version_id(file_name):
    actual_file_name = file_name.replace("_py_zip", ".py.zip")
    s3 = boto3.resource("s3")
    s3_key = os.path.join(_bin_lambda_dir, actual_file_name)
    return s3.Object(_shmenkins_bucket, s3_key).version_id
    
    
def remove_directory(path):
    if os.path.isdir(path):
        shutil.rmtree(path)
        
        
def ensure_directory(path):
    if not os.path.exists(path):
        os.makedirs(path)
        
def log(message, end="\n"):
    print(message, end=end)

_src_lambda_dir = "src/lambda"
_src_infra_dir = "src/infra"

_bin_dir = "bin"
_bin_lambda_dir = _bin_dir + "/lambda"

_shmenkins_bucket = "shmenkins"
_aws_region = "us-east-1"

_tfvars_file = "terraform.tfvars"

if __name__ == '__main__':
    main(docopt.docopt(__doc__))
